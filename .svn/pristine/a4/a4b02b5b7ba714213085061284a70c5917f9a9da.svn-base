#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-2, %rdx     # len -= 2
	jl Loop1
	iaddq $-6, %rdx
	jl BBLoop2

ALoop8:
	mrmovq (%rdi), %r8	# read val0 from src...
	mrmovq 8(%rdi), %r9 # read val1 from src...
	mrmovq 16(%rdi), %r10 # read val2 from src...
	mrmovq 24(%rdi), %r11 # read val3 from src...
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rbp
	rmmovq %r8, (%rsi)	# ...and store val0 to dst
	rmmovq %r9, 8(%rsi)	# ...and store val1 to dst
	rmmovq %r10, 16(%rsi)	# ...and store val2 to dst
	rmmovq %r11, 24(%rsi)	# ...and store val3 to dst
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rbp, 56(%rsi)

	andq %r8, %r8		# val0 <= 0?
	jle Npos0		# if so, goto Npos0:
	iaddq $1, %rax		# count++
Npos0:
	andq %r9, %r9		# val1 <= 0?
	jle Npos1		# if so, goto Npos1:
	iaddq $1, %rax		# count++
Npos1:
	andq %r10, %r10		# val2 <= 0?
	jle Npos2		# if so, goto Npos2:
	iaddq $1, %rax		# count++
Npos2:
	andq %r11, %r11		# val3 <= 0?
	jle Npos3		# if so, goto Check:
	iaddq $1, %rax		# count++
Npos3:
	andq %r12, %r12		# val0 <= 0?
	jle Npos4		# if so, goto Npos0:
	iaddq $1, %rax		# count++
Npos4:
	andq %r13, %r13		# val1 <= 0?
	jle Npos5		# if so, goto Npos1:
	iaddq $1, %rax		# count++
Npos5:
	andq %r14, %r14		# val2 <= 0?
	jle Npos6		# if so, goto Npos2:
	iaddq $1, %rax		# count++
Npos6:
	andq %rbp, %rbp		# val3 <= 0?
	jle Check		# if so, goto Check:
	iaddq $1, %rax		# count++
Check:
	iaddq $-8, %rdx
	jge Add8			# if so, goto Loop:
	iaddq $6, %rdx
	jl CLoop1

ALoop2:
	mrmovq 64(%rdi), %r10	# read val from src...
	mrmovq 72(%rdi), %r11
	rmmovq %r10, 64(%rsi)	# ...and store it to dst
	rmmovq %r11, 72(%rsi)

	andq %r10, %r10
	jle RNpos
	iaddq $1, %rax
RNpos:
	andq %r11, %r11
	jle Check2
	iaddq $1, %rax

Check2:
	iaddq $-2, %rdx
	jge Add2

ALoop1:
	iaddq $2, %rdx		# reset len
	jle Done            # if len <= 0, goto Done
	mrmovq 80(%rdi), %r10	# read val from src...
	rmmovq %r10, 80(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Done:
	iaddq $1, %rax		# count++
	ret

BBLoop2:
	iaddq $6, %rdx

BLoop2:
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)

	andq %r10, %r10
	jle BRNpos
	iaddq $1, %rax

BRNpos:
	andq %r11, %r11
	jle BCheck2
	iaddq $1, %rax

BCheck2:
	iaddq $-2, %rdx
	jge BAdd2

BLoop1:
	iaddq $2, %rdx		# reset len
	jle Done            # if len <= 0, goto Done
	mrmovq 16(%rdi), %r10	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Done:
	iaddq $1, %rax		# count++
	ret

Loop1:
	iaddq $2, %rdx		# reset len
	jle Done            # if len <= 0, goto Done
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Done:
	iaddq $1, %rax		# count++
	ret

CLoop1:
	iaddq $2, %rdx		# reset len
	jle Done            # if len <= 0, goto Done
	mrmovq 64(%rdi), %r10	# read val from src...
	rmmovq %r10, 64(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Done:
	iaddq $1, %rax		# count++
	ret

Add8:
	iaddq $64, %rdi
	iaddq $64, %rsi
	jmp ALoop8

Add2:
	iaddq $16, %rdi
	iaddq $16, %rsi
	jmp ALoop2

BAdd2:
	iaddq $16, %rdi
	iaddq $16, %rsi
	jmp BLoop2

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
