/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 * 
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 * 
 * Zhenyu Yang 519021910390
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

/* Marco for debug */
//#define DEBUG 1
#ifdef DEBUG
# define DBG_PRINTF(...) printf(__VA_ARGS__)
# define CHECK(verbose) mm_check(verbose)
# define DBG_PRINT_BLOCK(bp) printblock(bp)
# define CHECK_HEAP() checkheap()
#else
# define DBG_PRINTF(...)
# define CHECK(verbose)
# define DBG_PRINT_BLOCK(bp)
# define CHECK_HEAP()
#endif

/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8
 
/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)
#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))

/* Basic constants and macros */
#define WSIZE       4       /* Word and header/footer size (bytes) */
#define DSIZE       8       /* Double word size (bytes) */
#define CHUNKSIZE  ( (1 << 12) + 8 )  /* Extend heap by this amount (bytes) */

#define MAX(x, y) ((x) > (y)? (x) : (y))  

/* Size of free list */
#define LIST_SIZE 16

/* Pack a size and allocated bit into a word */
#define PACK(size, alloc)  ((size) | (alloc))

/* Read and write a word at address p */
#define GET(p)       (*(unsigned int *)(p))  
#define PUT(p, val)  (*(unsigned int *)(p) = (val))

/* Read the size and allocated fields from address p */
#define GET_SIZE(p)  (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1)

/* Given block ptr bp, compute address of its header and footer */
#define HDRP(bp)       ((char *)(bp) - WSIZE)
#define FTRP(bp)       ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)

/* Head and nil block of free list */
#define FREE_HEAD      ((char *)heap_listp - DSIZE)
#define NIL FREE_HEAD

/* Given free block fbp, compute address of pred and succ offset */
#define PRED_OFSTP(fbp) ((char *)(fbp))
#define SUCC_OFSTP(fbp) ((char *)(fbp) + WSIZE)

/* Given free block fbp, compute block pointer of next and previous free blocks */
#define PRED_FREE(fbp) (FREE_HEAD + GET(PRED_OFSTP(fbp)))
#define SUCC_FREE(fbp) (FREE_HEAD + GET(SUCC_OFSTP(fbp)))

/* Operation between pointer and offset */
#define SET_PTR(p, ptr) PUT(p, ((char *)ptr - FREE_HEAD))
#define GET_PTR(p) (FREE_HEAD + GET(p))

/* Given block ptr bp, compute address of next and previous blocks */
#define NEXT_BLKP(bp)  ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
#define PREV_BLKP(bp)  ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))

/* Function prototypes for internal helper routines */
static void *extend_heap(size_t words);
static void *raw_extend(size_t words);
static void *place(void *bp, size_t asize);
static void replace(void *bp, size_t asize);
static void *find_near(void *bp, size_t asize);
static void *find_fit(size_t asize);
static void *coalesce(void *bp);
static void printblock(void *bp); 
static int checkheap(void);
static int checkfreelist(void);
static int checkblock(void *bp);
static void insert_free(void *fbp, size_t fsize);
static void remove_free(void *fbp);

/* Heap Consistency Checker */
static int mm_check(void);

/* Global variables */
static char *heap_listp = 0;
static unsigned int flist_hdrs[LIST_SIZE];

/* 
 * mm_init - initialize the malloc package.
 */
int mm_init(void)
{
    DBG_PRINTF("Heap init:\n");
    /* Set headers of free list to NULL */
    memset(flist_hdrs, 0, sizeof(flist_hdrs));

    /* Create the initial empty heap */
    if ((heap_listp = mem_sbrk(4 * WSIZE)) == (void*)-1)
        return -1;
    PUT(heap_listp, 0);                            /* Alignment padding */
    PUT(heap_listp + (1 * WSIZE), PACK(DSIZE, 1)); /* Prologue header */
    PUT(heap_listp + (2 * WSIZE), PACK(DSIZE, 1)); /* Prologue footer */
    PUT(heap_listp + (3 * WSIZE), PACK(0, 1));     /* Epilogue header */
    heap_listp += (2 * WSIZE);

    /* Extend the empty heap with a free block of CHUNKSIZE bytes */
    if (extend_heap(CHUNKSIZE / WSIZE) == NULL)
        return -1;
    CHECK_HEAP();
    return 0;
}

/* 
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 */
void *mm_malloc(size_t size)
{
    DBG_PRINTF("Malloc size = 0x%lx bytes\n", size);
    size_t asize;      /* Adjusted block size */
    size_t extendsize; /* Amount to extend heap if no fit */
    char *bp;

    /* Ignore spurious requests */
    if (size == 0) return NULL;

    /* Adjust block size to include overhead and alignment reqs */
    if (size <= DSIZE)
        asize = 2 * DSIZE;
    else
        asize = DSIZE * ((size + (DSIZE) + (DSIZE - 1)) / DSIZE);

    /* Search the free list for a fit */
    if ((bp = find_fit(asize)) != NULL) {
        bp = place(bp, asize);
        CHECK_HEAP();
        return bp;
    }

    /* No fit found. Get more memory and place the block */
    extendsize = MAX(asize, CHUNKSIZE);
    if ((bp = extend_heap(extendsize / WSIZE)) == NULL)
        return NULL;
    bp = place(bp, asize);
    CHECK_HEAP();
    return bp;
}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *ptr)
{
    DBG_PRINTF("Free ptr: %p\n", ptr);
    size_t size = GET_SIZE(HDRP(ptr));

    PUT(HDRP(ptr), PACK(size, 0));
    PUT(FTRP(ptr), PACK(size, 0));
    coalesce(ptr);
    CHECK_HEAP();
}

/*
 * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
 */
void *mm_realloc(void *ptr, size_t size)
{
    DBG_PRINTF("Realloc ptr: %p, new size = 0x%lx bytes\n", ptr, size);

    /* If size == 0 then this is just free, and we return NULL. */
    if (size == 0) {
        mm_free(ptr);
        return NULL;
    }

    /* If oldptr is NULL, then this is just malloc */
    if (ptr == NULL) {
        return mm_malloc(size);
    }

    size_t oldsize, asize;

    oldsize = GET_SIZE(HDRP(ptr));
    if (size <= DSIZE) asize = 2 * DSIZE;
    else asize = DSIZE * ((size + (DSIZE) + (DSIZE - 1)) / DSIZE);

    if (oldsize < asize) {
        char *bp = find_near(ptr, asize);
        if (bp == NULL) {
            /* Find near failed, malloc at new space */
            void *newptr = mm_malloc(size);
            memcpy(newptr, ptr, size);
            mm_free(ptr);
            CHECK_HEAP();
            return newptr;
        }
        else {
            /* No need to malloc */
            if (bp != ptr) memcpy(bp, ptr, size);
            replace(bp, asize);
            CHECK_HEAP();
            return bp;
        }
    } 
    else if (oldsize > asize) {
        /* Just change the size of ptr */
        //replace(ptr, asize);
    }
    CHECK_HEAP();
    return ptr;
}

/* 
 * extend_heap - Extend heap with free block and return its block pointer
 */
static void *extend_heap(size_t words)
{
    char *bp;
    size_t size;

    /* Allocate an even number of words to maintain alignment */
    size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE;
    if ((long)(bp = mem_sbrk(size)) == -1) 
        return NULL;

    /* Initialize free block header/footer and the epilogue header */
    PUT(HDRP(bp), PACK(size, 0));         /* Free block header */
    PUT(FTRP(bp), PACK(size, 0));         /* Free block footer */
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); /* New epilogue header */

    /* Coalesce if the previous block was free */
    return coalesce(bp);
}

/* 
 * raw_extend - Extend heap with free block and return its block pointer without colaesce
 */
static void *raw_extend(size_t words)
{
    char *bp;
    size_t size;

    /* Allocate an even number of words to maintain alignment */
    size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE;
    if ((long)(bp = mem_sbrk(size)) == -1) 
        return NULL;

    /* Initialize free block header/footer and the epilogue header */
    PUT(HDRP(bp), PACK(size, 0));         /* Free block header */
    PUT(FTRP(bp), PACK(size, 0));         /* Free block footer */
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); /* New epilogue header */

    return bp;
}

/* 
 * place - Place block of asize bytes at start of free block bp 
 *         and split if remainder would be at least minimum block size
 */
static void *place(void *bp, size_t asize)
{
    size_t csize = GET_SIZE(HDRP(bp));
    remove_free(bp);
    
    if ((csize - asize) < (2 * DSIZE)) {
        PUT(HDRP(bp), PACK(csize, 1));
        PUT(FTRP(bp), PACK(csize, 1));
        return bp;
    } 
    else if (asize <= 0x60) {
        PUT(HDRP(bp), PACK(csize - asize, 0));
        PUT(FTRP(bp), PACK(csize - asize, 0));
        PUT(HDRP(NEXT_BLKP(bp)), PACK(asize, 1));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(asize, 1));
        insert_free(bp, csize - asize);
        return NEXT_BLKP(bp);
    } 
    else {
        PUT(HDRP(bp), PACK(asize, 1));
        PUT(FTRP(bp), PACK(asize, 1));
        bp = NEXT_BLKP(bp);
        PUT(HDRP(bp), PACK(csize - asize, 0));
        PUT(FTRP(bp), PACK(csize - asize, 0));
        insert_free(bp, csize - asize);
        return PREV_BLKP(bp);
    }
}

/* 
 * replace - Place block of asize bytes at start of alloc block bp 
 *         and split if remainder would be at least minimum block size
 */
static void replace(void *bp, size_t asize)
{
    /* asize always less than csize */
    size_t csize = GET_SIZE(HDRP(bp));

    if ((csize - asize) >= (2 * DSIZE)) {
        PUT(HDRP(bp), PACK(asize, 1));
        PUT(FTRP(bp), PACK(asize, 1));
        bp = NEXT_BLKP(bp);
        PUT(HDRP(bp), PACK(csize - asize, 0));
        PUT(FTRP(bp), PACK(csize - asize, 0));
        insert_free(bp, csize - asize);
    } else {
        PUT(HDRP(bp), PACK(csize, 1));
        PUT(FTRP(bp), PACK(csize, 1));
    }
}

/* 
 * find_fit - Find a fit for a block with asize bytes: first fit
 */
static void *find_fit(size_t asize)
{
    /* Index of header in free lists */
    int index;
    size_t ssize = asize;   /* Search size */
    for (index = 0; index < LIST_SIZE; index++, ssize >>= 1) {
        /* Find avaliable free block in list[index] */
        if (((ssize > 1) && index != LIST_SIZE - 1 ) || (flist_hdrs[index] == NULL))
            continue;
        void *bp = GET_PTR(flist_hdrs + index);
        while (bp != NIL) {
            if (asize <= GET_SIZE(HDRP(bp))) {
                return bp;
            }
            bp = SUCC_FREE(bp);
        }
    }
    /* Not fit */
    return NULL;
}

/* 
 * find_near - Find a fit block nearby, return NULL if not success
 */
static void *find_near(void *bp, size_t asize)
{
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t csize = GET_SIZE(HDRP(bp));

    if (prev_alloc && !next_alloc) {
        csize += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        if (csize >= asize) {
            remove_free(NEXT_BLKP(bp));
            PUT(HDRP(bp), PACK(csize,1));
            PUT(FTRP(bp), PACK(csize,1));
        } else return NULL;
    }
    else if (!prev_alloc && next_alloc) {
        csize += GET_SIZE(HDRP(PREV_BLKP(bp)));
        if (csize >= asize) {
            remove_free(PREV_BLKP(bp));
            PUT(FTRP(bp),PACK(csize,1));
            PUT(HDRP(PREV_BLKP(bp)),PACK(csize,1));
            bp = PREV_BLKP(bp);
        } else return NULL;
    }
    else if (!prev_alloc && !next_alloc) {
        csize += GET_SIZE(HDRP(PREV_BLKP(bp))) + 
            GET_SIZE(FTRP(NEXT_BLKP(bp)));
        if (csize >= asize) {
            remove_free(PREV_BLKP(bp));
            remove_free(NEXT_BLKP(bp));
            PUT(HDRP(PREV_BLKP(bp)), PACK(csize, 1));
            PUT(FTRP(NEXT_BLKP(bp)), PACK(csize, 1));
            bp = PREV_BLKP(bp);
        } else return NULL;
    } 
    else if (GET_SIZE(HDRP(NEXT_BLKP(bp))) == 0) {
        /* epilogue */
        size_t extendsize = MAX((asize - csize), CHUNKSIZE);
        if (raw_extend(extendsize / WSIZE) == NULL)
            return NULL;
        PUT(HDRP(bp), PACK(csize,1));
        PUT(FTRP(bp), PACK(csize,1));
    } 
    else return NULL;   /* No free block nearby */

    return bp;
}

/*
 * coalesce - Boundary tag coalescing. Return ptr to coalesced block
 */
static void *coalesce(void *bp)
{
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size = GET_SIZE(HDRP(bp));

    if (prev_alloc && next_alloc) {            /* Case 1 */
        // do nothing
    }

    else if (prev_alloc && !next_alloc) {      /* Case 2 */
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        remove_free(NEXT_BLKP(bp));
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size,0));
    }

    else if (!prev_alloc && next_alloc) {      /* Case 3 */
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        remove_free(PREV_BLKP(bp));
        PUT(FTRP(bp), PACK(size, 0));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }

    else {                                     /* Case 4 */
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) + 
            GET_SIZE(FTRP(NEXT_BLKP(bp)));
        remove_free(PREV_BLKP(bp));
        remove_free(NEXT_BLKP(bp));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }

    insert_free(bp, size);
    return bp;
}

static void printblock(void *bp)
{
    size_t hsize, halloc, fsize, falloc;

    hsize = GET_SIZE(HDRP(bp));
    halloc = GET_ALLOC(HDRP(bp));
    fsize = GET_SIZE(FTRP(bp));
    falloc = GET_ALLOC(FTRP(bp));

    if (hsize == 0) {
        printf("%p: EOL\n", bp);
    } 
    
    else {
        printf("%p: header: [0x%lx:%c] footer: [0x%lx:%c]\n", bp,
            hsize, (halloc ? 'a' : 'f'), fsize, (falloc ? 'a' : 'f'));
    }
}

static int checkblock(void *bp) 
{
    int legal = 1;

    if ((size_t)bp % 8) {
        DBG_PRINTF("Error: %p is not doubleword aligned\n", bp);
        legal = 0;
    }
    if (GET(HDRP(bp)) != GET(FTRP(bp))) {
        DBG_PRINTF("Error: header does not match footer\n");
        legal = 0;
    }

    return legal;
}

/* 
 * insert_free - Insert block to free list
 */
static void insert_free(void *fbp, size_t fsize)
{

    /* Index of header in free lists */
    int index = 0;
    for (size_t j = fsize; (j > 1) && (index < LIST_SIZE - 1);) {
        j >>= 1; index++;
    }

    char *pred = (char *)(flist_hdrs + index);
    char *succ = GET_PTR(pred);
    char *header = pred;

    /* Sort by size */
    while ((succ != NIL) && (fsize > GET_SIZE(HDRP(succ)))) {
        pred = succ;
        succ = SUCC_FREE(succ);
    }
    

    if (pred == header) {
        SET_PTR(pred, fbp);
        SET_PTR(PRED_OFSTP(fbp), FREE_HEAD);
    } 
    else {
        SET_PTR(SUCC_OFSTP(pred), fbp);
        SET_PTR(PRED_OFSTP(fbp), pred);
    }
    SET_PTR(SUCC_OFSTP(fbp), succ);
    if (succ != NIL) 
        SET_PTR(PRED_OFSTP(succ), fbp);
}

/* 
 * remove_free - Remove block from free list
 */
static void remove_free(void *fbp)
{
    size_t size = GET_SIZE(HDRP(fbp));
    /* Index of header in free lists */
    int index = 0;
    for (size_t j = size; (j > 1) && (index < LIST_SIZE - 1);) {
        j >>= 1; index++;
    }

    char *pred = PRED_FREE(fbp);
    char *succ = SUCC_FREE(fbp);
    char *head = (char *)(flist_hdrs + index);

    if (pred == NIL) SET_PTR(head, succ);
    else SET_PTR(SUCC_OFSTP(pred), succ);
    if (succ != NIL) SET_PTR(PRED_OFSTP(succ), pred);

    // PUT(PRED_FREE(fbp), NULL);
    // PUT(SUCC_FREE(fbp), NULL);
    
}

/* 
 * checkheap - My Heap Consistency Checker Part 1
 */
static int checkheap(void)
{
    char *bp = heap_listp;
    int legal = 1;

    //DBG_PRINTF("Heap (%p):\n", heap_listp);

    if ((GET_SIZE(HDRP(heap_listp)) != DSIZE) || !GET_ALLOC(HDRP(heap_listp))) {
        DBG_PRINTF("Bad prologue header\n");
        legal = 0;
    }
    legal &= checkblock(heap_listp);

    for (bp = heap_listp; GET_SIZE(HDRP(bp)) > 0; bp = NEXT_BLKP(bp)) {
        DBG_PRINT_BLOCK(bp);
        legal &= checkblock(bp);
    }

    DBG_PRINT_BLOCK(bp);
    if ((GET_SIZE(HDRP(bp)) != 0) || !(GET_ALLOC(HDRP(bp)))) {
        DBG_PRINTF("Bad epilogue header\n");
        legal = 0;
    }

    return legal;
}

/* 
 * checkfreelist - My Heap Consistency Checker Part 2
 */
static int checkfreelist(void)
{
    int legal = 1;

    

    return legal;
}










